#include "vk_mesh.h"

#include <array>

namespace spokk {

//
// MeshFormat
//
static const std::array<MeshFormat, VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE * 2> g_empty_mesh_formats = {{
    // Primitive restart disabled
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_POINT_LIST, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_LIST, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, VK_FALSE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, VK_FALSE} },
  // Primitive restart enabled
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_POINT_LIST, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_LIST, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY, VK_TRUE} },
  { {}, {}, {VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,nullptr,0, 0,nullptr, 0,nullptr}, {VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,nullptr,0, VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, VK_TRUE} },
  }};
const MeshFormat* MeshFormat::get_empty(VkPrimitiveTopology topology, VkBool32 enable_primitive_restart) {
  uint32_t index = topology;
  if (enable_primitive_restart) {
    index += VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE;
  }
  return &g_empty_mesh_formats[index];
}

void MeshFormat::finalize(VkPrimitiveTopology topology, VkBool32 enable_primitive_restart) {
  vertex_input_state_ci = {};
  vertex_input_state_ci.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
  vertex_input_state_ci.vertexBindingDescriptionCount = (uint32_t)vertex_buffer_bindings.size();
  vertex_input_state_ci.pVertexBindingDescriptions = vertex_buffer_bindings.data();
  vertex_input_state_ci.vertexAttributeDescriptionCount = (uint32_t)vertex_attributes.size();
  vertex_input_state_ci.pVertexAttributeDescriptions = vertex_attributes.data();
  input_assembly_state_ci = {};
  input_assembly_state_ci.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
  input_assembly_state_ci.topology = topology;
  input_assembly_state_ci.primitiveRestartEnable = enable_primitive_restart;
}

}  // namespace spokk
