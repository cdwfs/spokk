strict digraph Vulkan {
    application_name [label="Application Name"];
    application_name -> VkApplicationInfo;
    
    application_version [label="Application Version"];
    application_version -> VkApplicationInfo;

    engine_name [label="Engine Name"];
    engine_name -> VkApplicationInfo;

    engine_version [label="Engine Version"];
    engine_version -> VkApplicationInfo;

    api_version [label="API Version"];
    api_version -> VkApplicationInfo;
    
    allocation_functions [label="alloc/free/realloc\nfunctions"];
    allocation_functions -> VkAllocationCallbacks;

    instance_layer_names [label="instance layer\nnames"];
    instance_layer_names -> VkInstanceCreateInfo;

    instance_extension_names [label="instance extension\nnames"];
    instance_extension_names -> VkInstanceCreateInfo;
    
    device_layer_names [label="device layer\nnames"];
    device_layer_names -> VkDeviceCreateInfo;

    device_extension_names [label="device extension\nnames"];
    device_extension_names -> VkDeviceCreateInfo;
    
    VkAllocationCallbacks -> {
        VkInstance,
        VkPhysicalDevice,
        VkDevice,
        VkDebugReportCallbackEXT,
        VkSurfaceKHR,
        VkSwapchainKHR,
        VkDeviceMemory,
        VkBuffer,
        VkDescriptorSetLayout,
        VkPipelineLayout,
        VkRenderPass,
        VkShaderModule,
        VkSampler,
        VkPipelineCache,
        VkPipeline,
        VkDescriptorPool,
        VkFramebuffer,
        VkSemaphore
    }
    
    VkApplicationInfo -> {
        VkInstanceCreateInfo
    }

    VkInstanceCreateInfo -> VkInstance;
    VkInstance -> {
        VkPhysicalDevice,
        VkLayerProperties,
        VkExtensionProperties,
        VkDebugReportCallbackEXT,
        VkSurfaceKHR
    }

    VkPhysicalDevice -> {
        VkPhysicalDeviceProperties,
        VkPhysicalDeviceMemoryProperties,
        VkPhysicalDeviceFeatures,
        VkLayerProperties,
        VkExtensionProperties,
        VkQueueFamilyProperties,
        VkDevice,
        VkSurfaceCapabilitiesKHR,
        VkFormatProperties
    }

    VkPhysicalDeviceMemoryProperties -> {
        VkMemoryAllocateInfo
    }

    VkPhysicalDeviceFeatures -> {
        VkDeviceCreateInfo
    }

    VkQueueFamilyProperties -> {
        VkDeviceQueueCreateInfo,
        VkQueue
    }

    VkDeviceQueueCreateInfo -> VkDeviceCreateInfo;

    VkDeviceCreateInfo -> VkDevice;
    VkDevice -> {
        VkQueue,
        VkCommandPool,
        VkCommandBuffer,
        VkSurfaceFormatKHR,
        VkSwapchainKHR,
        VkImage,
        VkMemoryRequirements,
        VkDeviceMemory,
        VkBuffer,
        VkDescriptorSetLayout,
        VkPipelineLayout,
        VkRenderPass,
        VkShaderModule,
        VkSubresourceLayout,
        VkSampler,
        VkPipelineCache,
        VkPipeline,
        VkDescriptorPool,
        VkDescriptorSet,
        VkWriteDescriptorSet,
        VkFramebuffer,
        VkSemaphore
    }

    VkDebugReportCallbackCreateInfoEXT -> VkDebugReportCallbackEXT;

    VkCommandPoolCreateInfo -> VkCommandPool;
    VkCommandPool -> {
        VkCommandBufferAllocateInfo
    }

    VkCommandBufferAllocateInfo -> VkCommandBuffer;
    VkCommandBuffer -> {
        VkSubmitInfo
    }

    VkSurfaceKHR -> {
        VkSurfaceCapabilitiesKHR,
        VkSurfaceFormatKHR,
        VkSwapchainCreateInfoKHR
    }

    VkSurfaceFormatKHR -> {
        VkSwapchainCreateInfoKHR,
        VkFormat,
        VkColorSpaceKHR
    }

    VkFormat -> {
        VkSwapchainCreateInfoKHR,
        VkImageViewCreateInfo,
        VkImageCreateInfo,
        VkFormatProperties
    }

    VkSurfaceCapabilities -> {
        VkSurfaceTransformFlagsKHR
    }

    VkSurfaceTransformFlagsKHR -> VkSwapchainCreateInfoKHR;
    VkColorSpaceKHR -> VkSwapchainCreateInfoKHR;
    VkSwapchainCreateInfoKHR -> VkSwapchainKHR;

    VkSwapchainKHR -> {
        VkImage,
        VkImageViewCreateInfo,
        VkPresentInfoKHR
    }

    VkImageViewCreateInfo -> VkImageView;
    VkImageView -> {
        VkDescriptorImageInfo,
        VkFramebufferCreateInfo
    }
    

    VkImageCreateInfo -> VkImage;
    VkImage -> {
        VkMemoryRequirements,
        VkSubresourceLayout,
        VkImageMemoryBarrier
    }

    VkMemoryRequirements -> {
        VkMemoryAllocateInfo
    }

    VkMemoryAllocateInfo -> {
        VkDeviceMemory
    }

    VkVertexInputBindingDescription -> {
        VkPipelineVertexInputStateCreateInfo
    }

    VkVertexInputAttributeDescription -> {
        VkPipelineVertexInputStateCreateInfo
    }

    VkBufferCreateInfo -> VkBuffer;
    VkBuffer -> {
    }

    VkDescriptorSetLayoutBinding -> {
        VkDescriptorSetLayoutCreateInfo
    }

    VkDescriptorSetLayoutCreateInfo -> VkDescriptorSetLayout;
    VkDescriptorSetLayout -> {
        VkPipelineLayoutCreateInfo,
        VkDescriptorSetAllocateInfo
    }

    VkPipelineVertexInputStateCreateInfo -> VkPipelineVertexInputState;

    VkPushConstantRange -> {
        VkPipelineLayoutCreateInfo
    }

    VkPipelineLayoutCreateInfo -> VkPipelineLayout;
    VkPipelineLayout -> {
    }

    VkAttachmentDescriptions -> {
        VkRenderPassCreateInfo
    }

    VkAttachmentReference -> {
        VkSubpassDescription
    }

    VkSubpassDescription -> {
        VkRenderPassCreateInfo
    }

    VkRenderPassCreateInfo -> VkRenderPass;
    VkRenderPass -> {
        VkGraphicsPipelineCreateInfo,
        VkFramebufferCreateInfo,
        VkCommandBufferInheritanceInfo,
        VkRenderPassBeginInfo
    }

    shader_code [label="Shader Code"];
    shader_code -> VkShaderModuleCreateInfo;

    VkShaderModuleCreateInfo -> VkShaderModule;
    VkShaderModule -> {
        VkPipelineShaderStageCreateInfo
    }

    VkImageSubresource -> {
        VkSubresourceLayout
    }

    VkSubresourceLayout -> {
    }

    VkSamplerCreateInfo -> VkSampler;
    VkSampler -> {
        VkDescriptorImageInfo
    }

    VkDynamicState -> {
        VkPipelineDynamicStateCreateInfo
    }

    VkPipelineInputAssemblyStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkPipelineRasterizationStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkPipelineColorBlendAttachmentState -> VkPipelineColorBlendStateCreateInfo;
    VkPipelineColorBlendStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkPipelineViewportStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkPipelineDepthStencilStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkSampleMask -> VkPipelineMultisampleStateCreateInfo;
    VkPipelineMultisampleStateCreate -> VkGraphicsPipelineCreateInfo;
    VkPipelineCacheCreateInfo -> VkPipelineCache;
    VkPipelineCache -> VkPipeline;
    VkPipelineShaderStageCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkPipelineDynamicStateCreateInfo -> VkGraphicsPipelineCreateInfo;
    VkGraphicsPipelineCreateInfo -> VkPipeline;

    VkDescriptorPoolSize -> VkDescriptorPoolCreateInfo;
    VkDescriptorPoolCreateInfo -> VkDescriptorPool;
    VkDescriptorPool -> {
        VkDescriptorSetAllocateInfo
    }

    VkDescriptorSetAllocateInfo -> {
        VkDescriptorSet
    }
    VkDescriptorSet -> {
        VkWriteDescriptorSet
    }

    VkDescriptorImageInfo -> {
        VkWriteDescriptorSet
    }

    VkFramebufferCreateInfo -> VkFramebuffer;
    VkFramebuffer -> {
        VkCommandBufferInheritanceInfo,
        VkRenderPassBeginInfo
    }

    VkSemaphoreCreateInfo -> VkSemaphore;

    VkCommandBufferInheritanceInfo -> VkCommandBufferBeginInfo;

    VkClearValue -> VkRenderPassBeginInfo;

    VkPresentInfoKHR -> {
    }
}